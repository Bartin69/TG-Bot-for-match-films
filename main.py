# bot.py

import psycopg2
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import requests
import random
from config import DB_CONFIG, KINOPOISK_API_URL, KINOPOISK_API_KEY, TELEGRAM_BOT_TOKEN

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users_tg (
            user_id BIGINT PRIMARY KEY,
            username TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS likes (
            user_id BIGINT,
            movie_id INTEGER,
            FOREIGN KEY (user_id) REFERENCES users_tg(user_id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS connections (
            user_id BIGINT,
            partner_id BIGINT,
            FOREIGN KEY (user_id) REFERENCES users_tg(user_id),
            FOREIGN KEY (partner_id) REFERENCES users_tg(user_id)
        )
    ''')
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É", callback_data="add_connection")],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏", callback_data="show_connections")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É", callback_data="delete_connection")],
        [InlineKeyboardButton("üé¨ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º", callback_data="show_movies")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('INSERT INTO users_tg (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING', (user_id, username))
    conn.commit()
    conn.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏"
def show_connections(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º username –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        SELECT u.username 
        FROM connections c
        JOIN users_tg u ON c.partner_id = u.user_id
        WHERE c.user_id = %s
    ''', (user_id,))
    partners = cursor.fetchall()
    conn.close()

    if not partners:
        query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    keyboard = [[InlineKeyboardButton(partner[0], callback_data=f"match_{partner[0]}")] for partner in partners]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—ç—Ç—á–µ–π:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É"
def add_connection(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º username –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ username –ø–∞—Ä—Ç–Ω–µ—Ä–∞:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['action'] = 'add_connection'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –ø–∞—Ä—Ç–Ω–µ—Ä–∞
def handle_username(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    partner_username = update.message.text

    # –ù–∞—Ö–æ–¥–∏–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users_tg WHERE username = %s', (partner_username,))
    partner = cursor.fetchone()

    if partner:
        partner_id = partner[0]
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        cursor.execute('INSERT INTO connections (user_id, partner_id) VALUES (%s, %s) ON CONFLICT DO NOTHING', (user_id, partner_id))
        conn.commit()
        update.message.reply_text(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∫ {partner_username} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    conn.close()

def delete_connection(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT u.username 
        FROM connections c
        JOIN users_tg u ON c.partner_id = u.user_id
        WHERE c.user_id = %s
    ''', (user_id,))
    partners = cursor.fetchall()
    conn.close()

    if not partners:
        query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    keyboard = [[InlineKeyboardButton(partner[0], callback_data=f"delete_{partner[0]}")] for partner in partners]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

def handle_delete_connection(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    partner_username = query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ callback_data

    # –ù–∞—Ö–æ–¥–∏–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ username
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users_tg WHERE username = %s', (partner_username,))
    partner = cursor.fetchone()

    if not partner:
        query.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return

    partner_id = partner[0]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
    cursor.execute('DELETE FROM connections WHERE user_id = %s AND partner_id = %s', (user_id, partner_id))
    conn.commit()
    conn.close()

    query.message.reply_text(f"–ü—Ä–∏–≤—è–∑–∫–∞ —Å {partner_username} —É–¥–∞–ª–µ–Ω–∞!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∏–ø–∞
def skip_movie(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    show_movies(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è show_movies
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å–º–∞
def show_movies(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = query.message.reply_text("üîÑ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ...")

    # –ó–∞–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "order": "RATING",
        "type": "FILM",
        "ratingFrom": 3,
        "ratingTo": 10,
        "yearFrom": 1900,
        "yearTo": 2025,
        "page": random.randint(1, 5)
    }

    # –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
    response = requests.get(KINOPOISK_API_URL, headers={"X-API-KEY": KINOPOISK_API_KEY}, params=params)

    if response.status_code != 200:
        loading_message.edit_text(f"–û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}")
        return

    movies = response.json().get("items", [])
    if not movies:
        loading_message.edit_text("–û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
    movie = random.choice(movies)
    movie_id = movie.get("kinopoiskId")

    if not movie_id:
        loading_message.edit_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∏–ª—å–º–∞.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞
    movie_details_url = f"{KINOPOISK_API_URL}/{movie_id}"
    response_details = requests.get(movie_details_url, headers={"X-API-KEY": KINOPOISK_API_KEY})

    if response_details.status_code != 200:
        loading_message.edit_text(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞: {response_details.status_code}\n{response_details.text}")
        return

    movie_details = response_details.json()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–µ
    title = movie_details.get("nameRu", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    description = movie_details.get("description", movie_details.get("shortDescription", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    rating = movie_details.get("ratingKinopoisk", "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
    year = movie_details.get("year", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    poster_url = movie_details.get("posterUrl", "")

    # –ñ–∞–Ω—Ä—ã –∏ —Å—Ç—Ä–∞–Ω—ã
    genres = movie_details.get("genres", [])
    genres_str = ", ".join([genre.get("genre", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for genre in genres]) if genres else "–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    countries = movie_details.get("countries", [])
    countries_str = ", ".join([country.get("country", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for country in countries]) if countries else "–°—Ç—Ä–∞–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º
    web_url = movie_details.get("webUrl", "–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∏–ª—å–º–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_movie'] = movie_id

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data="like")],
        [InlineKeyboardButton("‚û°Ô∏è –°–∫–∏–ø", callback_data="skip")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"üìÖ –ì–æ–¥: {year}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        f"üåç –°—Ç—Ä–∞–Ω—ã: {countries_str}\n"
        f"üé≠ –ñ–∞–Ω—Ä—ã: {genres_str}\n"
        f"üìñ {description}\n"
        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º]({web_url})"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
    loading_message.delete()
    if poster_url:
        query.message.reply_photo(photo=poster_url, caption=message_text, reply_markup=reply_markup, parse_mode="Markdown")
    else:
        query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode="Markdown")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è like_movie
def like_movie(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    movie_id = context.user_data.get('current_movie')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('INSERT INTO likes (user_id, movie_id) VALUES (%s, %s) ON CONFLICT DO NOTHING', (user_id, movie_id))
    conn.commit()
    conn.close()

    update.callback_query.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∞–π–∫–∏!")
    show_movies(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def back_to_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    show_main_menu(update, context)

# –ü–æ–∫–∞–∑ –º—ç—Ç—á–µ–π
def show_matches(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    partner_username = query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ callback_data

    # –ù–∞—Ö–æ–¥–∏–º ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ username
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users_tg WHERE username = %s', (partner_username,))
    partner = cursor.fetchone()

    if not partner:
        query.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
        return

    partner_id = partner[0]

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –ª–∞–π–∫–∏
    cursor.execute('''
        SELECT movie_id FROM likes WHERE user_id = %s
        INTERSECT
        SELECT movie_id FROM likes WHERE user_id = %s
    ''', (user_id, partner_id))
    common_movies = cursor.fetchall()
    conn.close()

    if common_movies:
        movie_titles = [movie[0] for movie in common_movies]
        query.message.reply_text(f"–û–±—â–∏–µ —Ñ–∏–ª—å–º—ã —Å {partner_username}: {', '.join(map(str, movie_titles))}")
    else:
        query.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Ç –æ–±—â–∏—Ö —Ñ–∏–ª—å–º–æ–≤ —Å {partner_username}.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    updater = Updater(TELEGRAM_BOT_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(add_connection, pattern="add_connection"))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_username))
    dp.add_handler(CallbackQueryHandler(show_movies, pattern="show_movies"))
    dp.add_handler(CallbackQueryHandler(like_movie, pattern="like"))
    dp.add_handler(CallbackQueryHandler(skip_movie, pattern="skip"))
    dp.add_handler(CallbackQueryHandler(back_to_menu, pattern="back_to_menu"))
    dp.add_handler(CallbackQueryHandler(show_connections, pattern="show_connections"))
    dp.add_handler(CallbackQueryHandler(delete_connection, pattern="delete_connection"))
    dp.add_handler(CallbackQueryHandler(handle_delete_connection, pattern="delete_*"))
    dp.add_handler(CallbackQueryHandler(show_matches, pattern="match_*"))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()